= interrupts =

Sometimes, the flow of a program needs to be interrupted to process events that need a prompt response (i.e scanf)
Computer hardware has a mechanism called *interrupts* that handle these events. 

take moving a mouse for example; the hardware interrupts the current rogram to handle the mouse movement (to move
the mouse cursor). Interrupts cause control to be passed to an _interrupt handler_. These handlers are routines 
that process the iterrupt. Each type of interrupt is assigned an int number. At the beginning of physical memory, 
a table of _interrupt vectors_ live in the segment addresses of the interrupt vectors. Another way to think about
it is that the number is an index to this table of interrupt codes

External interrupts are rasied from outside of the CPU. (these can come from i/o devices). Internal interrupts are 
raised within the cpu, either from an error or the interrupt instruction. Error interrupts are also called _traps_ 
Interrupts generated from the interrupt instruction are called software interrupts. DOS uses these interrupts 
to implemtn its API, while more modern OS's like windows and UNIX uses a C based interface. 

When interrupt handlers are done, they return control back to the interrupted program before they finish, restoring
the registers to the same values they had before the interrupt happened, seeming as if nothing had happened except 
some CPU cycles got skipped. Traps don't usutally return, aborting instead.
